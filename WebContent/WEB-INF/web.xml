<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns="http://java.sun.com/xml/ns/javaee" 
		xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
		id="WebApp_ID" version="3.0">
	
	<!-- 上下文参数
	web.xml的配置中<context-param>配置作用
			1.	启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.
				读两个节点: <listener></listener> 和 <context-param></context-param>
			2.	紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文.
			3.	容器将<context-param></context-param>转化为键值对,并交给ServletContext.
			4.	容器创建<listener></listener>中的类实例,即创建监听.
			5.	在监听中会有 contextInitialized(ServletContextEvent args)初始化方法,
				在这个方法中获得ServletContext = ServletContextEvent.getServletContext();
				context-param的值 = ServletContext.getInitParameter("context-param的键");
			6.	得到这个context-param的值之后,你就可以做一些操作了.
				注意： 这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早.
				换句话说,这个时候你对<context-param>中的键值做的操作,将在你的WEB项目完全启动之前被执行.
					举例.你可能想在项目启动之前就打开数据库.
					那么这里就可以在<context-param>中设置数据库的连接方式,在监听类中初始化数据库的连接.
					这个监听是自己写的一个类,除了初始化方法,它还有销毁方法.用于关闭应用前释放资源.比如说数据库连接的关闭.
	 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!-- Spring的配置文件地址  -->
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	
	<!-- 监听器 帮助加载Spring的配置文件 
			ContextLoaderListener.class 去引导监听Spring's root [WebApplicationContext] 的启动和关闭
     									interface WebApplicationContext extends ApplicationContext{}
     									
     		Create a new {@code ContextLoaderListener} that will create a web application context 
     		based on the "contextClass" and "contextConfigLocation" servlet context-params.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
</web-app>